ExternalEvents_ctrl0_stm0 = {|ctrl0_stm0_term,opARet,opACall,ctrl0_stm0_object|}

assert T_ctrl0_stm0(0) :[deterministic]
assert T_ctrl0_stm0(0) :[divergence-free]
assert T_ctrl0_stm0(0) ; RUN({tock}) :[deadlock-free]

-- no time locks
assert RUN({tock}) ||| CHAOS(ExternalEvents_ctrl0_stm0)      [F= prioritise((T_ctrl0_stm0(0) ; RUN({tock})) |\ union(ExternalEvents_ctrl0_stm0,{tock}),<{},{tock}>)

-- zeno freedom
assert T_ctrl0_stm0(0) |\ union(ExternalEvents_ctrl0_stm0,{tock})  :[divergence-free]

-- every state is reachable
assert not STOP [T= ShowEnteredV_ctrl0_stm0(T_ctrl0_stm0_VS(0)) |\ {|ctrl0_stm0_enteredV|}
assert not STOP [T= ShowEnteredV_ctrl0_stm0(T_ctrl0_stm0_VS(0)) |\ {|ctrl0_stm0_enteredV|}
assert not STOP [T= ShowEnteredV_ctrl0_stm0(T_ctrl0_stm0_VS(0)) |\ {|ctrl0_stm0_enteredV|}

-- states can be reached infinitely often
assert ShowEnteredV_ctrl0_stm0(T_ctrl0_stm0_VS(0)) |\ {|ctrl0_stm0_enteredV."ctrl0_stm0_s0"|} [T= RUN({|ctrl0_stm0_enteredV."ctrl0_stm0_s0"|})
assert ShowEnteredV_ctrl0_stm0(T_ctrl0_stm0_VS(0)) |\ {|ctrl0_stm0_enteredV."ctrl0_stm0_s1"|} [T= RUN({|ctrl0_stm0_enteredV."ctrl0_stm0_s1"|})
assert ShowEnteredV_ctrl0_stm0(T_ctrl0_stm0_VS(0)) |\ {|ctrl0_stm0_enteredV."ctrl0_stm0_f0"|} [T= RUN({|ctrl0_stm0_enteredV."ctrl0_stm0_f0"|})

-- timed model is a refinement
assert sbisim(diamond(ctrl0_stm0(0))) [F= T_ctrl0_stm0(0) \ {tock}
assert sbisim(diamond(ctrl0_stm0_VS(0))) [T= T_ctrl0_stm0_VS(0) \ {tock}

-- do time constraints constrain traces?
assert T_ctrl0_stm0(0) \ {tock} [T= sbisim(diamond(ctrl0_stm0(0)))
assert T_ctrl0_stm0_VS(0) \ {tock} [T= sbisim(diamond(ctrl0_stm0_VS(0)))

-- memory models consistency check
assert timed::MemoryN_ctrl0_stm0(0) [FD= timed::MemoryO_ctrl0_stm0(0)
assert timed::MemoryO_ctrl0_stm0(0) [FD= timed::MemoryN_ctrl0_stm0(0)

-- clocks used after reset
ctrl0_stm0_clock_C_trans = {|ctrl0_stm0_term__."ctrl0_stm0_t2",ctrl0_stm0_term__."ctrl0_stm0_t3"|}
ctrl0_stm0_clock_C = CHAOS(diff(Events,ctrl0_stm0_clock_C_trans)) [| {| timed::ctrl0_stm0_clockReset."C" |} |> CHAOS(Events)
assert ctrl0_stm0_clock_C [T= timed::ctrl0_stm0_internal_(0)
