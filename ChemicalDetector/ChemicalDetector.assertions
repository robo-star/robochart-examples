csp Instantiations csp-begin
nametype real = { -90..180}
nametype nat = {0..2}
Signalling_flagTime = 0
nametype boolean = Bool
nametype string = LSeq(Char,2)
nametype int = { -2..2}
incr_BOUND = 2
decr_BOUND = 2

Plus(e1,e2,T) = if member(e1+e2,T) then e1+e2 else e1
Div(e1,e2,T) = if member(e1/e2,T) then e1/e2 else e1
Neg(e1,T) = if member(-e1,T) then -e1 else e1
Mult(e1,e2,T) = if member(e1*e2,T) then e1*e2 else e1
Modulus(e1,e2,T) = if member(e1%e2,T) then e1%e2 else e1
Minus(e1,e2,T) = if member(e1-e2,T) then e1-e2 else e1
csp-end

assertion a1: Detecting is not deterministic

csp OnlyCommands csp-begin
OnlyCommands = ChemicalDetectorSoftware_O(0) [|{|ChemicalDetectorSoftware_gas,ChemicalDetectorSoftware_light|}|] STOP
csp-end

assertion a2: OnlyCommands is deadlock-free

csp OnlyGasAndLight csp-begin
OnlyGasAndLight = ChemicalDetectorSoftware_O(0) [|{|ChemicalDetectorSoftware_cd|}|] STOP
csp-end

assertion a3: OnlyGasAndLight is deadlock-free

csp Spec1 csp-begin
Commands = ChemicalDetectorSoftware_cd.in?x -> (|~|e: {|ChemicalDetectorSoftware_turn.out,incrCall,decrCall|} @ e -> Commands)
Init = ChemicalDetectorSoftware_light.out.Color_green -> SKIP ||| ChemicalDetectorSoftware_gas.in -> SKIP
GasLight = let
  T = (
    ChemicalDetectorSoftware_gas.in -> SKIP
    |||
    (
      ChemicalDetectorSoftware_light.out.Color_red -> ChemicalDetectorSoftware_siren.out -> ChemicalDetectorSoftware_flag.out -> SKIP
      |~|
      ChemicalDetectorSoftware_light.out.Color_green -> SKIP
      |~|
      ChemicalDetectorSoftware_light.out.Color_amber -> SKIP
    )
  ); T
within
  Init; T
Spec1 = Commands ||| GasLight
csp-end

csp Impl1 csp-begin
Impl1 = ChemicalDetectorSoftware_O(0)\{|incrRet,decrRet|}
csp-end

assertion a4: Impl1 refines Spec1

assertion a5: ChemicalDetectorSoftware is deadlock-free
assertion a6: ChemicalDetectorSoftware is divergence-free
